/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 

#define SSD1306_LCDHEIGHT 64

const unsigned char PROGMEM logo []  = {
  // 'logo'
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x1f, 0x00, 0x00, 0x03, 
  0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x1f, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 
  0x07, 0xff, 0xe0, 0x00, 0x1f, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 
  0x1f, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x0f, 
  0xc3, 0xe0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x0f, 0xc3, 0xe0, 0x00, 0x00, 
  0x00, 0x7e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x0f, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x7e, 0x3e, 0x3e, 
  0x1f, 0x07, 0xfc, 0x0f, 0xc3, 0xe0, 0x7f, 0x80, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x0f, 0xff, 0x0f, 
  0xc0, 0x01, 0xff, 0xe0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x0f, 0xff, 0x0f, 0xc0, 0x01, 0xff, 0xf0, 
  0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x0f, 0x9f, 0x0f, 0xc0, 0x03, 0xfb, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 
  0x1f, 0x0f, 0x1f, 0x0f, 0xc0, 0x03, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x00, 0x1f, 0x0f, 
  0xc0, 0x03, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x00, 0x1f, 0x0f, 0xc0, 0x03, 0xe1, 0xf0, 
  0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x03, 0x9f, 0x0f, 0xc0, 0x03, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 
  0x1f, 0x0f, 0xff, 0x0f, 0xc0, 0x03, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x0f, 0xff, 0x0f, 
  0xc3, 0xe3, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x1f, 0x9f, 0x0f, 0xc3, 0xe3, 0xe1, 0xf0, 
  0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x1f, 0x1f, 0x0f, 0xc3, 0xe3, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 
  0x1f, 0x1f, 0x1f, 0x0f, 0xc3, 0xe3, 0xe1, 0xf0, 0x00, 0x7e, 0x3e, 0x3e, 0x1f, 0x1f, 0x1f, 0x0f, 
  0xc7, 0xe3, 0xe1, 0xf0, 0x00, 0x7e, 0x3f, 0x3e, 0x1f, 0x1f, 0x9f, 0x0f, 0xff, 0xe3, 0xf3, 0xf0, 
  0x00, 0x7e, 0x3f, 0xfe, 0x1f, 0x1f, 0xff, 0x07, 0xff, 0xe3, 0xff, 0xf0, 0x00, 0x7e, 0x1f, 0xfe, 
  0x1f, 0x0f, 0xff, 0x07, 0xff, 0xc1, 0xff, 0xe0, 0x00, 0x7e, 0x1f, 0xbe, 0x1f, 0x07, 0xcf, 0x03, 
  0xff, 0x80, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

  

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  Serial.begin(9600);

  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  // init done
  
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();
     display.drawBitmap(0, 0, logo, 96, 64, WHITE);
   display.display();
   delay(200);
  display.clearDisplay();

}

int textSize = 2;
int index = 0;
int tindex = 0;
int mSize = 6;
int tSize = 7;
const String messages[]={"Red","Orange","Yellow","Green","Cyan","Blue","Indigo","Violet" };
const char t[]= "|/-\\|/-";

void loop() {

  if(index<0 || index>=mSize){index = 0;}
  if(tindex<0 || tindex>=tSize){tindex = 0;}
  if(textSize == 0 || textSize >= 5) {   textSize = 1;   }
  showText(textSize, messages[index], t[tindex]);
  //showText(textSize, "", t[tindex]);
  index++;
  tindex++;
  delay(100);
  Serial.println(index);
}

void showText(int s, String text, char c){
  display.clearDisplay();
  display.setTextSize(s);
  display.setTextColor(WHITE);
 
  display.setCursor(0,0);
display.print(text + "\nColor\n" + c);
   display.display();
}


void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, WHITE);
    }
    display.display();
    delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
        icons[f][XPOS] = random(display.width());
        icons[f][YPOS] = 0;
        icons[f][DELTAY] = random(5) + 1;
      }
    }
   }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  for (uint8_t i=0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }    
  display.display();
  delay(1);
}

